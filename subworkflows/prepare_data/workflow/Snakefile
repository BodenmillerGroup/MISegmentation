from pathlib import Path
import pandas as pd
import re
import shutil
import pathlib
# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

#configfile: 'config/config_prepare.yml'

# Allow users to fix the underlying OS via singularity.
#singularity: "docker://votti/miniconda3mamba:v0.4.2"
conda: 'envs/env_base.yaml'

# Input
remote_fol_path_base= pathlib.Path(config['fol_path_base'])
remote_file_path_ilp= remote_fol_path_base / config['fn_path_ilp']
remote_file_path_panel= remote_fol_path_base / config['fn_path_panel']
remote_fol_path_ome= remote_fol_path_base / config['fn_path_ome']
remote_fol_path_cpproj = remote_fol_path_base / config['fn_path_cpproj']

# Not used yet:
remote_fol_path_atiffs= remote_fol_path_base / 'analysis'
remote_fol_path_ilastikcrops= remote_fol_path_base / 'ilastik_random_combined'

# Optional input
fol_path_resources = Path('resources')
fn_manual_crop_coordinates = config['fn_manual_crop_coordinates']

# Regular expressions to extract data from crop filenames
re_label_basic = config['re_label_basic']
re_label_crop = config['re_label_crop']
re_label_suffix = config['re_label_suffix']

# params
default_crop_size = config['default_crop_size']
# Output
fol_path_results = Path(config['fol_path_output'])

file_path_ilp = fol_path_results / 'ilatik_trained.ilp'
file_path_panel = fol_path_results / 'panel.csv'
fol_path_ome = fol_path_results / 'ome'

fol_path_training=fol_path_results / 'training_images'
file_pat_training_imgs = fol_path_training / '{cropname}.tiff'
fol_path_labels=fol_path_results / 'training_labels'
file_path_ilp_features=fol_path_results / 'feature_matrix.txt'
file_path_cp_seg=fol_path_results / 'cellsegmentation.cpproj'
file_path_labelmeta= fol_path_results / 'training_image_meta.csv'

_training_meta = None
def get_labelmeta():
    checkpoints.get_training_cropmeta.get()
    if _training_meta is not None:
        return _training_meta
    else:
        return pd.read_csv(file_path_labelmeta)


def get_cropnames(wildcards):
    cropnames = get_labelmeta()['cropname'].values
    return expand(file_pat_training_imgs, cropname=cropnames)

rule all:
    input:
        fol_path_labels, file_path_ilp_features, file_path_labelmeta,
         fol_path_ome, file_path_panel
        # The first rule should define the default target files
        # Subsequent target rules can be specified below. They should start with all_*.

rule extract_training_labels:
    input:
          file_path_ilastik=file_path_ilp
    output:
          fol_path_labels=directory(fol_path_labels)
    conda: 'envs/env_base.yaml'
    shell:
         'python workflow/scripts/extract_from_ilp.py extract_labels {input.file_path_ilastik} {output.fol_path_labels}'
         f' --default_img_shape "{default_crop_size}"'

rule extract_feature_matrix:
    input:
         file_path_ilastik=file_path_ilp
    output:
         file_path_ilp_features
    conda: 'envs/env_base.yaml'
    shell:
         'python workflow/scripts/extract_from_ilp.py extract_feature_matrix '
         '{input.file_path_ilastik} {output[0]}'

rule get_training_images:
    input:
        remote_fol_path_ilastikcrops / '{cropname}.tiff'
    output:
        fol_path_training / '{cropname}.tiff'
    run:
        shutil.copy(input[0], output[0])


checkpoint get_training_cropmeta:
    # TODO: Move into helper function
    input:
        fol_labels=fol_path_labels
    output:
        fn_cropmeta=file_path_labelmeta
    params:
        re_basic=re_label_basic,
        re_crop=re_label_crop,
        re_suffix=re_label_suffix,
        fn_manual_coordinates=fn_manual_crop_coordinates
    conda: 'envs/env_base.yaml'
    script:
        'scripts/get_cropmeta.py'




# Retrieve from remote
rule get_ilp:
    input: remote_file_path_ilp
    output: file_path_ilp
    shell:
         """
         rsync {input[0]} {output[0]}
         """


rule get_panel:
    input: remote_file_path_panel
    output: file_path_panel
    shell:
         """
         rsync {input[0]} {output[0]}
         """

rule get_ome:
    input: remote_fol_path_ome
    output: directory(fol_path_ome)
    shell:
         """
         unzip {input[0]} -d {output[0]}
         """
