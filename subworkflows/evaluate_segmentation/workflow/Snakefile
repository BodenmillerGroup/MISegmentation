from pathlib import Path
import pandas as pd
import re
import shutil
import pathlib
from snakemake.utils import validate
include: 'rules/cellprofiler.smk'
include: 'rules/ilastik.smk'
# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

#configfile: 'config/config_prepare.yml'

# Allow users to fix the underlying OS via singularity.
#singularity: "docker://votti/miniconda3mamba:v0.4.2"
conda: 'envs/env_base.yaml'
validate(config, "schemas/config_evaluate.schema.yml")

cp_plugins = 'resources/ImcPluginsCP/plugins'

cellprofiler_container = 'docker://cellprofiler/cellprofiler:4.0.7'
ilastik_container = 'docker://ilastik/ilastik-from-binary:1.3.3post3'
ilastik_python = '/ilastik-release/bin/python'
imctools_container = config['varia']['imctools_container']
# Input
# Regular expressions to extract data from crop filenames
# params
# Output
fol_path_results = Path(config['project_id'])

file_path_panel = fol_path_results / 'panel.csv'

fn_config_prepare_data = config['config_prepare']
project_id = config['project_id']
csv_metal = config['csv_metal']
csv_stack_ilastik = config['csv_stack_ilastik']
config_stacks = {'ilastik': {'col_bool': csv_stack_ilastik,
                                     'min_image_size': 50}}

fol_pat_stack = fol_path_results / 'stacks_{stack}'
fol_path_stack_ilastik = str(fol_pat_stack).format(**{'stack': 'ilastik'})

fol_path_ilastik_crops = fol_path_results / 'ilastik_crops'

fol_prep = pathlib.Path(f"{project_id}")

fn_ilastik_full = fol_prep / 'ilastik_trained_full.ilp'

subworkflow prepare_data:
    workdir: '../../prepare_data/'
    snakefile:
             "../../prepare_data/workflow/Snakefile"
    configfile:
              fn_config_prepare_data

fn_path_csv = prepare_data(str(fol_prep / 'panel.csv'))
fol_path_ome = prepare_data(str(fol_prep / 'ome'))

rule all:
    input: fol_path_stack_ilastik, fol_path_ilastik_crops,
        fn_ilastik_full

rule ome2analysis:
    input:
         fol_ome = fol_path_ome,
         panel = fn_path_csv
    output:
          directory(str(fol_pat_stack))
    container:
             imctools_container
    params:
          column_used = lambda wildcards: config_stacks[wildcards.stack][
              'col_bool'],
          column_metal = csv_metal,
          suffix = '_{stack}',
          min_imgsize = lambda wildcards: config_stacks[wildcards.stack][
              'min_image_size']
    threads: 32
    script:
          'scripts/imc2analysis.py'

rule get_trained_classifier:
    input:
        fol_labels=prepare_data(str(fol_prep / 'training_labels')),
        fol_imgs=fol_path_ilastik_crops,
        fn_feature_matrix=prepare_data(str(fol_prep / 'feature_matrix.txt')),
        fn_file_meta=prepare_data(str(fol_prep / 'training_image_meta.csv'))
    output:
        fn_ilastik_full
    container: ilastik_container
    shell:
        """
        {ilastik_python} workflow/scripts/train_headless.py {output[0]}\
            {input.fol_imgs} \
            {input.fol_labels} \
            {input.fn_file_meta} \
            {input.fn_feature_matrix}
            
        """


config_dict_cp = {
        'ilastik_crops':
{
        'message':  """\
                    Prepare ilastik crops
                    
                    This will prepare ilastik crops by reproducing
                    the pre-labeled                    
                    """,
        'run_size': 1,
        'plugins': cp_plugins,
        'pipeline': 'resources/1_prepare_ilastik.cppipe',
        'input_files': [
            fol_path_stack_ilastik,
            prepare_data(str(fol_prep / 'training_image_meta.csv'))
        ],
        'output_patterns': {'.':
                            directory(fol_path_ilastik_crops)},
        'input_folder': prepare_data(str(fol_prep))
    }
                 }

define_cellprofiler_rules(config_dict_cp, fol_path_results, container_cp=cellprofiler_container)
